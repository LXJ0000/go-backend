// Code generated by MockGen. DO NOT EDIT.
// Source: ./interaction.go
//
// Generated by this command:
//
//	mockgen -source=./interaction.go -destination=./mock/interaction.go -package=domain_mock
//

// Package domain_mock is a generated GoMock package.
package domain_mock

import (
	reflect "reflect"

	domain "github.com/LXJ0000/go-backend/internal/domain"
	gomock "go.uber.org/mock/gomock"
	context "golang.org/x/net/context"
)

// MockInteractionUseCase is a mock of InteractionUseCase interface.
type MockInteractionUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockInteractionUseCaseMockRecorder
}

// MockInteractionUseCaseMockRecorder is the mock recorder for MockInteractionUseCase.
type MockInteractionUseCaseMockRecorder struct {
	mock *MockInteractionUseCase
}

// NewMockInteractionUseCase creates a new mock instance.
func NewMockInteractionUseCase(ctrl *gomock.Controller) *MockInteractionUseCase {
	mock := &MockInteractionUseCase{ctrl: ctrl}
	mock.recorder = &MockInteractionUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInteractionUseCase) EXPECT() *MockInteractionUseCaseMockRecorder {
	return m.recorder
}

// CancelCollect mocks base method.
func (m *MockInteractionUseCase) CancelCollect(c context.Context, biz string, bizID, userID, collectionID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelCollect", c, biz, bizID, userID, collectionID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CancelCollect indicates an expected call of CancelCollect.
func (mr *MockInteractionUseCaseMockRecorder) CancelCollect(c, biz, bizID, userID, collectionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelCollect", reflect.TypeOf((*MockInteractionUseCase)(nil).CancelCollect), c, biz, bizID, userID, collectionID)
}

// CancelLike mocks base method.
func (m *MockInteractionUseCase) CancelLike(c context.Context, biz string, bizID, userID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelLike", c, biz, bizID, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CancelLike indicates an expected call of CancelLike.
func (mr *MockInteractionUseCaseMockRecorder) CancelLike(c, biz, bizID, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelLike", reflect.TypeOf((*MockInteractionUseCase)(nil).CancelLike), c, biz, bizID, userID)
}

// Collect mocks base method.
func (m *MockInteractionUseCase) Collect(c context.Context, biz string, bizID, userID, collectionID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Collect", c, biz, bizID, userID, collectionID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Collect indicates an expected call of Collect.
func (mr *MockInteractionUseCaseMockRecorder) Collect(c, biz, bizID, userID, collectionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Collect", reflect.TypeOf((*MockInteractionUseCase)(nil).Collect), c, biz, bizID, userID, collectionID)
}

// IncrReadCount mocks base method.
func (m *MockInteractionUseCase) IncrReadCount(c context.Context, biz string, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IncrReadCount", c, biz, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// IncrReadCount indicates an expected call of IncrReadCount.
func (mr *MockInteractionUseCaseMockRecorder) IncrReadCount(c, biz, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncrReadCount", reflect.TypeOf((*MockInteractionUseCase)(nil).IncrReadCount), c, biz, id)
}

// Info mocks base method.
func (m *MockInteractionUseCase) Info(c context.Context, biz string, bizID, userID int64) (domain.Interaction, domain.UserInteractionStat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Info", c, biz, bizID, userID)
	ret0, _ := ret[0].(domain.Interaction)
	ret1, _ := ret[1].(domain.UserInteractionStat)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Info indicates an expected call of Info.
func (mr *MockInteractionUseCaseMockRecorder) Info(c, biz, bizID, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockInteractionUseCase)(nil).Info), c, biz, bizID, userID)
}

// Like mocks base method.
func (m *MockInteractionUseCase) Like(c context.Context, biz string, bizID, userID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Like", c, biz, bizID, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Like indicates an expected call of Like.
func (mr *MockInteractionUseCaseMockRecorder) Like(c, biz, bizID, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Like", reflect.TypeOf((*MockInteractionUseCase)(nil).Like), c, biz, bizID, userID)
}

// MockInteractionRepository is a mock of InteractionRepository interface.
type MockInteractionRepository struct {
	ctrl     *gomock.Controller
	recorder *MockInteractionRepositoryMockRecorder
}

// MockInteractionRepositoryMockRecorder is the mock recorder for MockInteractionRepository.
type MockInteractionRepositoryMockRecorder struct {
	mock *MockInteractionRepository
}

// NewMockInteractionRepository creates a new mock instance.
func NewMockInteractionRepository(ctrl *gomock.Controller) *MockInteractionRepository {
	mock := &MockInteractionRepository{ctrl: ctrl}
	mock.recorder = &MockInteractionRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInteractionRepository) EXPECT() *MockInteractionRepositoryMockRecorder {
	return m.recorder
}

// BatchIncrReadCount mocks base method.
func (m *MockInteractionRepository) BatchIncrReadCount(c context.Context, biz []string, id []int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchIncrReadCount", c, biz, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// BatchIncrReadCount indicates an expected call of BatchIncrReadCount.
func (mr *MockInteractionRepositoryMockRecorder) BatchIncrReadCount(c, biz, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchIncrReadCount", reflect.TypeOf((*MockInteractionRepository)(nil).BatchIncrReadCount), c, biz, id)
}

// CancelCollect mocks base method.
func (m *MockInteractionRepository) CancelCollect(c context.Context, biz string, bizID, userID, collectionID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelCollect", c, biz, bizID, userID, collectionID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CancelCollect indicates an expected call of CancelCollect.
func (mr *MockInteractionRepositoryMockRecorder) CancelCollect(c, biz, bizID, userID, collectionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelCollect", reflect.TypeOf((*MockInteractionRepository)(nil).CancelCollect), c, biz, bizID, userID, collectionID)
}

// CancelLike mocks base method.
func (m *MockInteractionRepository) CancelLike(c context.Context, biz string, bizID, userID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelLike", c, biz, bizID, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CancelLike indicates an expected call of CancelLike.
func (mr *MockInteractionRepositoryMockRecorder) CancelLike(c, biz, bizID, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelLike", reflect.TypeOf((*MockInteractionRepository)(nil).CancelLike), c, biz, bizID, userID)
}

// Collect mocks base method.
func (m *MockInteractionRepository) Collect(c context.Context, biz string, bizID, userID, collectionID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Collect", c, biz, bizID, userID, collectionID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Collect indicates an expected call of Collect.
func (mr *MockInteractionRepositoryMockRecorder) Collect(c, biz, bizID, userID, collectionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Collect", reflect.TypeOf((*MockInteractionRepository)(nil).Collect), c, biz, bizID, userID, collectionID)
}

// GetByIDs mocks base method.
func (m *MockInteractionRepository) GetByIDs(c context.Context, biz string, id []int64) (map[int64]domain.Interaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByIDs", c, biz, id)
	ret0, _ := ret[0].(map[int64]domain.Interaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByIDs indicates an expected call of GetByIDs.
func (mr *MockInteractionRepositoryMockRecorder) GetByIDs(c, biz, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByIDs", reflect.TypeOf((*MockInteractionRepository)(nil).GetByIDs), c, biz, id)
}

// IncrReadCount mocks base method.
func (m *MockInteractionRepository) IncrReadCount(c context.Context, biz string, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IncrReadCount", c, biz, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// IncrReadCount indicates an expected call of IncrReadCount.
func (mr *MockInteractionRepositoryMockRecorder) IncrReadCount(c, biz, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncrReadCount", reflect.TypeOf((*MockInteractionRepository)(nil).IncrReadCount), c, biz, id)
}

// Like mocks base method.
func (m *MockInteractionRepository) Like(c context.Context, biz string, bizID, userID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Like", c, biz, bizID, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Like indicates an expected call of Like.
func (mr *MockInteractionRepositoryMockRecorder) Like(c, biz, bizID, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Like", reflect.TypeOf((*MockInteractionRepository)(nil).Like), c, biz, bizID, userID)
}

// Stat mocks base method.
func (m *MockInteractionRepository) Stat(c context.Context, biz string, bizID, userID int64) (domain.Interaction, domain.UserInteractionStat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stat", c, biz, bizID, userID)
	ret0, _ := ret[0].(domain.Interaction)
	ret1, _ := ret[1].(domain.UserInteractionStat)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Stat indicates an expected call of Stat.
func (mr *MockInteractionRepositoryMockRecorder) Stat(c, biz, bizID, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stat", reflect.TypeOf((*MockInteractionRepository)(nil).Stat), c, biz, bizID, userID)
}
